module syntax.ExpParser;

header {
    import syntax.ExpParserSyntax.*;
}

Exp {paren} =
    Assign Exp {stmts}
    | Assign
    | assignIf Exp {ifStmt}.

Assign : Exp =
  Cell sp " = " Formula ",".

assignIf =
    ifRef + "=" nIf {ifAssign}.

Formula =
      nIf                           {numIF}
    | "SUM(" + NumArguments + ")"    {SUM}
    | "AVERAGE(" + NumArguments + ")"    {AVERAGE}
    | "CONCATENATE(" + NumArguments + ")"    {conCat}
    | Formula "+" Formula             {Add, left, 2}
    | Formula "-" Formula           {Sub, left, 2}
    | Formula "*" Formula           {Mul, left, 1}
    | Formula "/" Formula           {Div, left, 1}
    | Formula "^" Formula        {pow, left, 3}
    | Formula "&" Formula        {and, left, 3}
    | Formula "<" Formula        {less, left, 3}
    | Formula ">" Formula        {great, left, 3}
    | Formula "=" Formula        {equal, left, 3}
    | Formula "<=" Formula       {lessEqual, left, 3}
    | Formula ">=" Formula       {greatEqual, left, 3}
    | Array
    | CellRef
    | ifRef                             {numIfRef}
    | NumConstant
    | Str           {strConst}
    | '(' Formula ')'
    | "null"        {nullNum}.

nIf =
    "IF(" + Formula + ";" + Formula + ";" + Formula + ")".


NumArguments =
    Formula ";" NumArguments {Args}
  | Formula     {Arg}.

NumConstant : Formula =
    Integer     {Num}
  | Bool        {Boo}.

Array : Formula =
    "[." Cell ":." Cell "]"         {Arr}.

CellRef : Formula =
  "[." Cell "]"      {Ref}.

Cell : Formula =
  col row.

col : String =
  [A-Z]+.

row : String =
  [1-9][0-9]*.

ifRef =
  row + "if".

Integer : String =
      Digits "." Digits
    | Digits Spacing .

Digits : String =
  Digit+.

Str : String =
  "\'" middleOfString .

middleOfString : String =
    "\'"
  | _ middleOfString.

Digit : String =
  [0-9].

Letters : String =
  Letter+.

Letter : String =
  [A-Z].

Bool : String =
    'false'
  | 'true'.