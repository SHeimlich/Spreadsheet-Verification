module syntax.ExpParser;

header {
    import syntax.ExpParserSyntax.*;
}

option verbose;

Program =
    Exp*.

Exp {paren} =
    Assign.

Assign : Exp =
  Cell sp "=" Formula ",".

Formula =
     NumFormula  {nf}
     |     StringFormula {sf}.

NumFormula =
      "IF(" + NumFormula + ";" + NumFormula + ";" + NumFormula + ")" {numIF}
    | "SUM(" + NumArguments + ")"    {SUM}
    | "AVERAGE(" + NumArguments + ")"    {AVERAGE}
    | NumFormula "+" NumFormula             {Add, left, 2}
    | NumFormula "-" NumFormula           {Sub, left, 2}
    | NumFormula "*" NumFormula           {Mul, left, 1}
    | NumFormula "/" NumFormula           {Div, left, 1}
    | NumFormula "^" NumFormula        {pow, left, 3}
    | NumFormula "&" NumFormula        {and, left, 3}
    | NumFormula "<" NumFormula        {less, left, 3}
    | NumFormula ">" NumFormula        {great, left, 3}
    | NumFormula "=" NumFormula        {equal, left, 3}
    | NumFormula "<=" NumFormula       {lessEqual, left, 3}
    | NumFormula ">=" NumFormula       {greatEqual, left, 3}
    | Array
    | CellRef
    | NumConstant
    | '(' NumFormula ')'.

StringFormula =
    Str {strConst}
    | NumFormula   {NumAsStr}.


NumArguments =
    NumFormula ";" NumArguments {Args}
  | NumFormula     {Arg}.

NumConstant : NumFormula =
    Integer     {Num}
  | Bool        {Boo}.

Array : NumFormula =
    CellRef ":" CellRef         {Arr}.

CellRef : NumFormula =
  "[." Cell "]"      {Ref}.

Cell : NumFormula =
  col row.

col : String =
  [A-Z]+.

row : String =
  [1-9][0-9]*.

Integer : String =
  Digits Spacing.

Digits : String =
  Digit+.

Str : String =
  "\'" middleOfString+ .

middleOfString : String =
    "\'"
  | _ middleOfString.

Digit : String =
  [0-9].

Letters : String =
  Letter+.

Letter : String =
  [A-Z].

Bool : String =
    'false'
  | 'true'.