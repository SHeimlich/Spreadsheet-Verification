// AUTOMATICALLY GENERATED by sbt-rats - EDIT AT YOUR OWN RISK

package syntax


object ExpParserSyntax {

    sealed abstract class ASTNode extends Product
    
    sealed abstract class Exp extends ASTNode with org.bitbucket.inkytonik.kiama.output.PrettyExpression
    case class stmts (assign : Exp, exp : Exp) extends Exp with org.bitbucket.inkytonik.kiama.output.PrettyNaryExpression {
        val priority = 0
        val fixity = org.bitbucket.inkytonik.kiama.output.Infix (org.bitbucket.inkytonik.kiama.output.NonAssoc)
    }
    case class stmt (assign : Exp) extends Exp with org.bitbucket.inkytonik.kiama.output.PrettyNaryExpression {
        val priority = 0
        val fixity = org.bitbucket.inkytonik.kiama.output.Infix (org.bitbucket.inkytonik.kiama.output.NonAssoc)
    }
    case class ifStmt (assignIf : assignIf, exp : Exp) extends Exp with org.bitbucket.inkytonik.kiama.output.PrettyNaryExpression {
        val priority = 0
        val fixity = org.bitbucket.inkytonik.kiama.output.Infix (org.bitbucket.inkytonik.kiama.output.NonAssoc)
    }
     
    case class Assign (cell : NumFormula, formula : Formula) extends Exp with org.bitbucket.inkytonik.kiama.output.PrettyNaryExpression {
        val priority = 0
        val fixity = org.bitbucket.inkytonik.kiama.output.Infix (org.bitbucket.inkytonik.kiama.output.NonAssoc)
    }
     
    sealed abstract class Formula extends ASTNode
    case class nf (numFormula : NumFormula) extends Formula  
    case class sf (stringFormula : StringFormula) extends Formula  
     
    sealed abstract class assignIf extends ASTNode
    case class ifAssign (ifRefs : Vector[ifRef], numFormulas1 : Vector[NumFormula], numFormulas2 : Vector[NumFormula], numFormulas3 : Vector[NumFormula]) extends assignIf  {
        require (ifRefs.length > 0, "ifRefs field can't be empty")
        require (numFormulas1.length > 0, "numFormulas1 field can't be empty")
        require (numFormulas2.length > 0, "numFormulas2 field can't be empty")
        require (numFormulas3.length > 0, "numFormulas3 field can't be empty")
    }
     
    sealed abstract class NumFormula extends ASTNode
    case class numIF (numFormulas1 : Vector[NumFormula], numFormulas2 : Vector[NumFormula], numFormulas3 : Vector[NumFormula]) extends NumFormula  {
        require (numFormulas1.length > 0, "numFormulas1 field can't be empty")
        require (numFormulas2.length > 0, "numFormulas2 field can't be empty")
        require (numFormulas3.length > 0, "numFormulas3 field can't be empty")
    }
    case class SUM (numArgumentss : Vector[NumArguments]) extends NumFormula  {
        require (numArgumentss.length > 0, "numArgumentss field can't be empty")
    }
    case class AVERAGE (numArgumentss : Vector[NumArguments]) extends NumFormula  {
        require (numArgumentss.length > 0, "numArgumentss field can't be empty")
    }
    case class Add (numFormula1 : NumFormula, numFormula2 : NumFormula) extends NumFormula  
    case class Sub (numFormula1 : NumFormula, numFormula2 : NumFormula) extends NumFormula  
    case class Mul (numFormula1 : NumFormula, numFormula2 : NumFormula) extends NumFormula  
    case class Div (numFormula1 : NumFormula, numFormula2 : NumFormula) extends NumFormula  
    case class pow (numFormula1 : NumFormula, numFormula2 : NumFormula) extends NumFormula  
    case class and (numFormula1 : NumFormula, numFormula2 : NumFormula) extends NumFormula  
    case class less (numFormula1 : NumFormula, numFormula2 : NumFormula) extends NumFormula  
    case class great (numFormula1 : NumFormula, numFormula2 : NumFormula) extends NumFormula  
    case class equal (numFormula1 : NumFormula, numFormula2 : NumFormula) extends NumFormula  
    case class lessEqual (numFormula1 : NumFormula, numFormula2 : NumFormula) extends NumFormula  
    case class greatEqual (numFormula1 : NumFormula, numFormula2 : NumFormula) extends NumFormula  
    case class numIfRef (ifRef : ifRef) extends NumFormula  
     
    sealed abstract class StringFormula extends ASTNode
    case class strConst (str : String) extends StringFormula  
    case class NumAsStr (numFormula : NumFormula) extends StringFormula  
     
    sealed abstract class NumArguments extends ASTNode
    case class Args (numFormula : NumFormula, numArguments : NumArguments) extends NumArguments  
    case class Arg (numFormula : NumFormula) extends NumArguments  
     
    case class Num (integer : String) extends NumFormula  
    case class Boo (bool : String) extends NumFormula  
     
    case class Arr (cellRef1 : NumFormula, cellRef2 : NumFormula) extends NumFormula  
     
    case class Ref (cell : NumFormula) extends NumFormula  
     
    case class Cell (col : String, row : String) extends NumFormula  
       
    case class ifRef (rows : Vector[String]) extends ASTNode
            
}
