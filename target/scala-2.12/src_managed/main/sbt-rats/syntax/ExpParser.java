// ===========================================================================
// This file has been generated by
// Rats! Parser Generator, version 2.4.0,
// (C) 2004-2014 Robert Grimm,
// on Monday, 25 March 2019 at 3:03:22 pm.
// Edit at your own risk.
// ===========================================================================

package syntax;

import java.io.Reader;
import java.io.IOException;

import java.util.HashSet;
import java.util.Set;

import xtc.util.Pair;
import scala.Option;
import scala.collection.immutable.Vector;
import sbtrats.ParserSupport;
import sbtrats.SVector;



import xtc.parser.ParserBase;
import xtc.parser.Column;
import xtc.parser.Result;
import xtc.parser.SemanticValue;
import xtc.parser.ParseError;

import syntax.ExpParserSyntax.*;

import sbtrats.Action;
import xtc.tree.Location;
import org.bitbucket.inkytonik.kiama.parsing.Input;
import org.bitbucket.inkytonik.kiama.util.FileSource;
import org.bitbucket.inkytonik.kiama.util.Message;
import org.bitbucket.inkytonik.kiama.util.Position;
import org.bitbucket.inkytonik.kiama.util.Positions;
import org.bitbucket.inkytonik.kiama.util.Source;

/**
 * Packrat parser for grammar <code>syntax.ExpParser</code>.
 *
 * <p />This class has been generated by the <i>Rats!</i> parser
 * generator, version 2.4.0, (C) 2004-2014 Robert Grimm.
 */

public final class ExpParser extends ParserBase {

  // =========================================================================

  /** The Kiama source from which input is being read. */
  protected Source source;

  /** The Kiama position store being used to track value positions. */
  protected Positions positions;

  /**
   * Create a new packrat parser.
   *
   * @param src The Kiama source to be parsed.
   * @param posns The store in which to keep track of parsed value positions.
   * @throws NullPointerException Signals a null file name.
   * @throws IllegalArgumentException Signals a negative file size.
   */
  public ExpParser(final Source src, final Positions posns) {
      this(src, INIT_SIZE - 1, posns);
  }

  /**
   * Create a new packrat parser.
   *
   * @param src The Kiama source to be parsed.
   * @param size The length of the character stream.
   * @param posns The store in which to keep track of parsed value positions.
   * @throws NullPointerException Signals a null file name.
   * @throws IllegalArgumentException Signals a negative file size.
   */
  public ExpParser(final Source src, final int size, final Positions posns) {
      this(src.reader(), src.optName().isEmpty() ? "" : src.optName().get(), size);
      source = src;
      positions = posns;
  }

  /** Set start position of an Object to one that corresponds to a start
   *  index and the finish position to the one that corresponds to the
   *  current parsing index. */
  void setLocation(final Object object, final int start) {
    if (null != object) {
      Column s = column(start);
      positions.setStart(object, new Position(s.line, s.column, source));
      int finish = yyCount == 0 ? 0 : yyCount - 1;
      Column f = column(finish);
      positions.setFinish(object, new Position(f.line, f.column, source));
    }
  }

  /** Set the start position of an Object to the start position of
   *  another object and the finish position to one that corresponds to
   *  the current parsing index. If the source object doesn't have a
   *  start position, do nothing. */
  void copyLocation(final Object object, final Object another) {
    if ((null != object) && (null != another)) {
      scala.Option<Position> optStart = positions.getStart(another);
      if (!optStart.isEmpty()) {
        scala.Option<Object> optOffset = optStart.get().optOffset();
        if (!optOffset.isEmpty())
          setLocation(object, ((Integer)optOffset.get()).intValue());
      }
    }
  }

  /** Return a Kiama message for a given parse error. */
  public Message errorToMessage(ParseError error) {
    Location loc = location(error.index);
    Position pos = new Position(loc.line, loc.column, source);
    positions.setStart(error, pos);
    positions.setFinish(error, pos);
    return new Message(error, error.msg);
  }

  /** Return a Kiama input for a given parse index. */
  public Input indexToInput(int index) {
    return new Input(source, index);
  }


  /** The KEYWORDS set. */
  public static final Set<String> KEYWORDS = new HashSet<String>();

  // =========================================================================

  /** Chunk 1 of memoized results. */
  static final class Chunk1 {
    Result fSymbol1;
    Result fSymbol2;
    Result fSymbol3;
    Result fExp;
    Result fNumFormula;
    Result fnIf;
    Result fnIf$$Plus1;
    Result fnIf$$Plus2;
    Result f$$Shared1;
    Result fnIf$$Plus4;
  }

  /** Chunk 2 of memoized results. */
  static final class Chunk2 {
    Result fnIf$$Plus6;
    Result fNumArguments;
    Result fCell;
    Result frow;
    Result frow$$Star1;
    Result fifRef;
    Result fifRef$$Plus1;
    Result fmiddleOfString;
    Result fNumFormulaLevel2;
    Result fNumFormulaLevel2$$Star1;
  }

  /** Chunk 3 of memoized results. */
  static final class Chunk3 {
    Result fNumFormulaLevel1;
    Result fNumFormulaLevel1$$Star1;
    Result fNumFormulaLevel0;
    Result fNumFormulaLevel0$$Plus1;
    Result fNumFormulaLevel0$$Plus2;
    Result fNumFormulaLevel0$$Plus3;
    Result fNumFormulaLevel0$$Plus4;
    Result fWord;
  }

  // =========================================================================

  /** Memoization table column. */
  static final class ExpParserColumn extends Column {
    Chunk1 chunk1;
    Chunk2 chunk2;
    Chunk3 chunk3;
  }

  // =========================================================================

  /**
   * Create a new packrat parser.
   *
   * @param reader The reader.
   * @param file The file name.
   */
  public ExpParser(final Reader reader, final String file) {
    super(reader, file);
  }

  /**
   * Create a new packrat parser.
   *
   * @param reader The file reader.
   * @param file The file name.
   * @param size The file size.
   */
  public ExpParser(final Reader reader, final String file, final int size) {
    super(reader, file, size);
  }

  // =========================================================================

  protected Column newColumn() {
    return new ExpParserColumn();
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Symbol1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol1(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fSymbol1) 
      yyColumn.chunk1.fSymbol1 = pSymbol1$1(yyStart);
    return yyColumn.chunk1.fSymbol1;
  }

  /** Actually parse syntax.ExpParser.Symbol1. */
  private Result pSymbol1$1(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol1Alts(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Symbol1Alts.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol1Alts(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '*':
        {
          yyValue = "*";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case ']':
        {
          yyValue = "]";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '=':
        {
          yyValue = "=";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '<':
        {
          yyValue = "<";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '&':
        {
          yyValue = "&";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case ')':
        {
          yyValue = ")";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '-':
        {
          yyValue = "-";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case ',':
        {
          yyValue = ",";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case ';':
        {
          yyValue = ";";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '\'':
        {
          yyValue = "\'";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '+':
        {
          yyValue = "+";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '(':
        {
          yyValue = "(";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '^':
        {
          yyValue = "^";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '/':
        {
          yyValue = "/";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '>':
        {
          yyValue = ">";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("symbol1 alts expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Symbol2.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol2(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fSymbol2) 
      yyColumn.chunk1.fSymbol2 = pSymbol2$1(yyStart);
    return yyColumn.chunk1.fSymbol2;
  }

  /** Actually parse syntax.ExpParser.Symbol2. */
  private Result pSymbol2$1(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol2Alts(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Symbol2Alts.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol2Alts(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '<':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('=' == yyC) {

              yyValue = "<=";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }
        }
        break;

      case '>':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('=' == yyC) {

              yyValue = ">=";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }
        }
        break;

      case '[':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('.' == yyC) {

              yyValue = "[.";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }
        }
        break;

      case ':':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('.' == yyC) {

              yyValue = ":.";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }
        }
        break;

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("symbol2 alts expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Symbol3.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol3(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fSymbol3) 
      yyColumn.chunk1.fSymbol3 = pSymbol3$1(yyStart);
    return yyColumn.chunk1.fSymbol3;
  }

  /** Actually parse syntax.ExpParser.Symbol3. */
  private Result pSymbol3$1(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol3Alts(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Symbol3Alts.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol3Alts(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case ' ':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('=' == yyC) {

              yyC = character(yyIndex);
              if (-1 != yyC) {
                yyIndex = yyIndex + 1;
                if (' ' == yyC) {

                  yyValue = " = ";

                  return new SemanticValue(yyValue, yyIndex, yyError);
                }
              }
            }
          }
        }
        break;

      case 'I':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('F' == yyC) {

              yyC = character(yyIndex);
              if (-1 != yyC) {
                yyIndex = yyIndex + 1;
                if ('(' == yyC) {

                  yyValue = "IF(";

                  return new SemanticValue(yyValue, yyIndex, yyError);
                }
              }
            }
          }
        }
        break;

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("symbol3 alts expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Symbol8.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol8(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol8Alts(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Symbol8Alts.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol8Alts(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('A' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('V' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('E' == yyC) {
          yyIndex = yyIndex + 1;

          yyC = character(yyIndex);
          if ('R' == yyC) {
            yyIndex = yyIndex + 1;

            yyC = character(yyIndex);
            if ('A' == yyC) {
              yyIndex = yyIndex + 1;

              yyC = character(yyIndex);
              if ('G' == yyC) {
                yyIndex = yyIndex + 1;

                yyC = character(yyIndex);
                if ('E' == yyC) {
                  yyIndex = yyIndex + 1;

                  yyC = character(yyIndex);
                  if ('(' == yyC) {
                    yyIndex = yyIndex + 1;

                    yyValue = "AVERAGE(";

                    return new SemanticValue(yyValue, yyIndex, yyError);
                  }
                }
              }
            }
          }
        }
      }
    }

    // Done.
    yyError = yyError.select("symbol8 alts expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Symbol4.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol4(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol4Alts(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Symbol4Alts.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol4Alts(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('S' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('U' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('M' == yyC) {
          yyIndex = yyIndex + 1;

          yyC = character(yyIndex);
          if ('(' == yyC) {
            yyIndex = yyIndex + 1;

            yyValue = "SUM(";

            return new SemanticValue(yyValue, yyIndex, yyError);
          }
        }
      }
    }

    // Done.
    yyError = yyError.select("symbol4 alts expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Exp.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pExp(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fExp) yyColumn.chunk1.fExp = pExp$1(yyStart);
    return yyColumn.chunk1.fExp;
  }

  /** Actually parse syntax.ExpParser.Exp. */
  private Result pExp$1(final int yyStart) throws IOException {
    Result     yyResult;
    Exp        yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pAssign(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Exp v1 = yyResult.semanticValue();

      final int yyChoice1 = yyResult.index;

      // Nested alternative 1.

      yyResult = pExp(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Exp v2 = yyResult.semanticValue();

        yyValue = new stmts (v1, v2);

        if (yyValue instanceof Object) {
          setLocation((Object)yyValue, yyStart);
        }
        return yyResult.createValue(yyValue, yyError);
      }

      // Nested alternative 2.

      yyValue = v1;

      return new SemanticValue(yyValue, yyChoice1, yyError);
    }

    // Alternative 2.

    yyResult = passignIf(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      assignIf v1 = yyResult.semanticValue();

      yyResult = pExp(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Exp v2 = yyResult.semanticValue();

        yyValue = new ifStmt (v1, v2);

        if (yyValue instanceof Object) {
          setLocation((Object)yyValue, yyStart);
        }
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Assign.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pAssign(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    Exp        yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pCell(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      NumFormula v1 = yyResult.semanticValue();

      yyBase   = yyResult.index;
      yyResult = pSymbol3(yyBase);
      if (yyResult.hasValue(" = ")) {

        yyResult = pFormula(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Formula v2 = yyResult.semanticValue();

          yyBase   = yyResult.index;
          yyResult = pSymbol1(yyBase);
          if (yyResult.hasValue(",")) {

            yyValue = new Assign (v1, v2);

            if (yyValue instanceof Object) {
              setLocation((Object)yyValue, yyStart);
            }
            return yyResult.createValue(yyValue, yyError);
          } else {
            yyError = yyError.select("',' expected", yyBase);
          }
        }
      } else {
        yyError = yyError.select("' = ' expected", yyBase);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Formula.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pFormula(final int yyStart) throws IOException {
    Result     yyResult;
    Formula    yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pNumFormula(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      NumFormula v1 = yyResult.semanticValue();

      yyValue = new nf (v1);

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 2.

    yyResult = pStringFormula(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      StringFormula v1 = yyResult.semanticValue();

      yyValue = new sf (v1);

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.assignIf.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result passignIf(final int yyStart) throws IOException {
    Result      yyResult;
    int         yyBase;
    int         yyRepetition1;
    boolean     yyRepeated1;
    Vector<ifRef> yyRepValue1;
    assignIf    yyValue;
    ParseError  yyError = ParseError.DUMMY;

    // Alternative 1.

    yyRepetition1 = yyStart;
    yyRepeated1   = false;
    yyRepValue1   = SVector.empty();
    while (true) {

      yyResult = pifRef(yyRepetition1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        ifRef v$el$1 = yyResult.semanticValue();

        yyRepetition1 = yyResult.index;
        yyRepeated1   = true;
        yyRepValue1   = SVector.create(v$el$1, yyRepValue1);
        continue;
      }
      break;
    }

    if (yyRepeated1) {
      Vector<ifRef> v1 = SVector.reverse(yyRepValue1);

      yyBase   = yyRepetition1;
      yyResult = pSymbol1(yyBase);
      if (yyResult.hasValue("=")) {

        yyResult = pnIf(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          nIf v2 = yyResult.semanticValue();

          yyValue = new ifAssign (v1, v2);

          if (yyValue instanceof Object) {
            setLocation((Object)yyValue, yyStart);
          }
          return yyResult.createValue(yyValue, yyError);
        }
      } else {
        yyError = yyError.select("'=' expected", yyBase);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.NumFormula.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pNumFormula(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fNumFormula) 
      yyColumn.chunk1.fNumFormula = pNumFormula$1(yyStart);
    return yyColumn.chunk1.fNumFormula;
  }

  /** Actually parse syntax.ExpParser.NumFormula. */
  private Result pNumFormula$1(final int yyStart) throws IOException {
    Result     yyResult;
    NumFormula yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pNumFormulaLevel3(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      NumFormula v1 = yyResult.semanticValue();

      yyValue = v1;

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.nIf.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pnIf(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fnIf) yyColumn.chunk1.fnIf = pnIf$1(yyStart);
    return yyColumn.chunk1.fnIf;
  }

  /** Actually parse syntax.ExpParser.nIf. */
  private Result pnIf$1(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    nIf        yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pnIf$$Plus1(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {

      yyResult = pnIf$$Plus2(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<NumFormula> v1 = yyResult.semanticValue();

        yyResult = p$$Shared1(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {

          yyResult = pnIf$$Plus4(yyResult.index);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Vector<NumFormula> v2 = yyResult.semanticValue();

            yyResult = p$$Shared1(yyResult.index);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {

              yyResult = pnIf$$Plus6(yyResult.index);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                Vector<NumFormula> v3 = yyResult.semanticValue();

                yyBase   = yyResult.index;
                yyResult = pSymbol1(yyBase);
                if (yyResult.hasValue(")")) {

                  yyValue = new nIf (v1, v2, v3);

                  if (yyValue instanceof Object) {
                    setLocation((Object)yyValue, yyStart);
                  }
                  return yyResult.createValue(yyValue, yyError);
                } else {
                  yyError = yyError.select("')' expected", yyBase);
                }
              }
            }
          }
        }
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal syntax.ExpParser.nIf$$Plus1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pnIf$$Plus1(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fnIf$$Plus1) 
      yyColumn.chunk1.fnIf$$Plus1 = pnIf$$Plus1$1(yyStart);
    return yyColumn.chunk1.fnIf$$Plus1;
  }

  /** Actually parse syntax.ExpParser.nIf$$Plus1. */
  private Result pnIf$$Plus1$1(final int yyStart) throws IOException {
    Result     yyResult;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol3(yyStart);
    if (yyResult.hasValue("IF(")) {

      final int yyChoice1 = yyResult.index;

      // Nested alternative 1.

      yyResult = pnIf$$Plus1(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        yyValue = null;

        return yyResult.createValue(yyValue, yyError);
      }

      // Nested alternative 2.

      yyValue = null;

      return new SemanticValue(yyValue, yyChoice1, yyError);
    }

    // Done.
    yyError = yyError.select("n if expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal syntax.ExpParser.nIf$$Plus2.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pnIf$$Plus2(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fnIf$$Plus2) 
      yyColumn.chunk1.fnIf$$Plus2 = pnIf$$Plus2$1(yyStart);
    return yyColumn.chunk1.fnIf$$Plus2;
  }

  /** Actually parse syntax.ExpParser.nIf$$Plus2. */
  private Result pnIf$$Plus2$1(final int yyStart) throws IOException {
    Result           yyResult;
    Vector<NumFormula> yyValue;
    ParseError       yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pNumFormula(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      NumFormula v$el$1 = yyResult.semanticValue();

      final int yyChoice1 = yyResult.index;

      // Nested alternative 1.

      yyResult = pnIf$$Plus2(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<NumFormula> v$2 = yyResult.semanticValue();

        yyValue = SVector.create(v$el$1, v$2);

        return yyResult.createValue(yyValue, yyError);
      }

      // Nested alternative 2.

      yyValue = SVector.create(v$el$1);

      return new SemanticValue(yyValue, yyChoice1, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal syntax.ExpParser.$$Shared1.
   * This nonterminal represents the duplicate productions 
   * syntax.ExpParser.nIf$$Plus3 and syntax.ExpParser.nIf$$Plus5.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result p$$Shared1(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.f$$Shared1) 
      yyColumn.chunk1.f$$Shared1 = p$$Shared1$1(yyStart);
    return yyColumn.chunk1.f$$Shared1;
  }

  /** Actually parse syntax.ExpParser.$$Shared1. */
  private Result p$$Shared1$1(final int yyStart) throws IOException {
    Result     yyResult;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue(";")) {

      final int yyChoice1 = yyResult.index;

      // Nested alternative 1.

      yyResult = p$$Shared1(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        yyValue = null;

        return yyResult.createValue(yyValue, yyError);
      }

      // Nested alternative 2.

      yyValue = null;

      return new SemanticValue(yyValue, yyChoice1, yyError);
    }

    // Done.
    yyError = yyError.select(" expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal syntax.ExpParser.nIf$$Plus4.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pnIf$$Plus4(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fnIf$$Plus4) 
      yyColumn.chunk1.fnIf$$Plus4 = pnIf$$Plus4$1(yyStart);
    return yyColumn.chunk1.fnIf$$Plus4;
  }

  /** Actually parse syntax.ExpParser.nIf$$Plus4. */
  private Result pnIf$$Plus4$1(final int yyStart) throws IOException {
    Result           yyResult;
    Vector<NumFormula> yyValue;
    ParseError       yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pNumFormula(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      NumFormula v$el$3 = yyResult.semanticValue();

      final int yyChoice1 = yyResult.index;

      // Nested alternative 1.

      yyResult = pnIf$$Plus4(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<NumFormula> v$4 = yyResult.semanticValue();

        yyValue = SVector.create(v$el$3, v$4);

        return yyResult.createValue(yyValue, yyError);
      }

      // Nested alternative 2.

      yyValue = SVector.create(v$el$3);

      return new SemanticValue(yyValue, yyChoice1, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal syntax.ExpParser.nIf$$Plus6.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pnIf$$Plus6(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fnIf$$Plus6) 
      yyColumn.chunk2.fnIf$$Plus6 = pnIf$$Plus6$1(yyStart);
    return yyColumn.chunk2.fnIf$$Plus6;
  }

  /** Actually parse syntax.ExpParser.nIf$$Plus6. */
  private Result pnIf$$Plus6$1(final int yyStart) throws IOException {
    Result           yyResult;
    Vector<NumFormula> yyValue;
    ParseError       yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pNumFormula(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      NumFormula v$el$5 = yyResult.semanticValue();

      final int yyChoice1 = yyResult.index;

      // Nested alternative 1.

      yyResult = pnIf$$Plus6(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<NumFormula> v$6 = yyResult.semanticValue();

        yyValue = SVector.create(v$el$5, v$6);

        return yyResult.createValue(yyValue, yyError);
      }

      // Nested alternative 2.

      yyValue = SVector.create(v$el$5);

      return new SemanticValue(yyValue, yyChoice1, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.StringFormula.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pStringFormula(final int yyStart) throws IOException {
    Result        yyResult;
    StringFormula yyValue;
    ParseError    yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pStr(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      String v1 = yyResult.semanticValue();

      yyValue = new strConst (v1);

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 2.

    yyResult = pNumFormula(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      NumFormula v1 = yyResult.semanticValue();

      yyValue = new NumAsStr (v1);

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.NumArguments.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pNumArguments(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fNumArguments) 
      yyColumn.chunk2.fNumArguments = pNumArguments$1(yyStart);
    return yyColumn.chunk2.fNumArguments;
  }

  /** Actually parse syntax.ExpParser.NumArguments. */
  private Result pNumArguments$1(final int yyStart) throws IOException {
    Result       yyResult;
    int          yyBase;
    NumArguments yyValue;
    ParseError   yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pNumFormula(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      NumFormula v1 = yyResult.semanticValue();

      final int yyChoice1 = yyResult.index;

      // Nested alternative 1.

      yyBase   = yyChoice1;
      yyResult = pSymbol1(yyBase);
      if (yyResult.hasValue(";")) {

        yyResult = pNumArguments(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          NumArguments v2 = yyResult.semanticValue();

          yyValue = new Args (v1, v2);

          if (yyValue instanceof Object) {
            setLocation((Object)yyValue, yyStart);
          }
          return yyResult.createValue(yyValue, yyError);
        }
      } else {
        yyError = yyError.select("';' expected", yyBase);
      }

      // Nested alternative 2.

      yyValue = new Arg (v1);

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return new SemanticValue(yyValue, yyChoice1, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.NumConstant.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pNumConstant(final int yyStart) throws IOException {
    Result     yyResult;
    NumFormula yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pInteger(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      String v1 = yyResult.semanticValue();

      yyValue = new Num (v1);

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 2.

    yyResult = pBool(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      String v1 = yyResult.semanticValue();

      yyValue = new Boo (v1);

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Array.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pArray(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    NumFormula yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol2(yyStart);
    if (yyResult.hasValue("[.")) {

      yyResult = pCell(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        NumFormula v1 = yyResult.semanticValue();

        yyBase   = yyResult.index;
        yyResult = pSymbol2(yyBase);
        if (yyResult.hasValue(":.")) {

          yyResult = pCell(yyResult.index);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            NumFormula v2 = yyResult.semanticValue();

            yyBase   = yyResult.index;
            yyResult = pSymbol1(yyBase);
            if (yyResult.hasValue("]")) {

              yyValue = new Arr (v1, v2);

              if (yyValue instanceof Object) {
                setLocation((Object)yyValue, yyStart);
              }
              return yyResult.createValue(yyValue, yyError);
            } else {
              yyError = yyError.select("']' expected", yyBase);
            }
          }
        } else {
          yyError = yyError.select("':.' expected", yyBase);
        }
      }
    }

    // Done.
    yyError = yyError.select("array expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.CellRef.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pCellRef(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    NumFormula yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol2(yyStart);
    if (yyResult.hasValue("[.")) {

      yyResult = pCell(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        NumFormula v1 = yyResult.semanticValue();

        yyBase   = yyResult.index;
        yyResult = pSymbol1(yyBase);
        if (yyResult.hasValue("]")) {

          yyValue = new Ref (v1);

          if (yyValue instanceof Object) {
            setLocation((Object)yyValue, yyStart);
          }
          return yyResult.createValue(yyValue, yyError);
        } else {
          yyError = yyError.select("']' expected", yyBase);
        }
      }
    }

    // Done.
    yyError = yyError.select("cell ref expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Cell.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pCell(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fCell) 
      yyColumn.chunk2.fCell = pCell$1(yyStart);
    return yyColumn.chunk2.fCell;
  }

  /** Actually parse syntax.ExpParser.Cell. */
  private Result pCell$1(final int yyStart) throws IOException {
    Result     yyResult;
    NumFormula yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pcol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      String v1 = yyResult.semanticValue();

      yyResult = prow(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        String v2 = yyResult.semanticValue();

        yyValue = new Cell (v1, v2);

        if (yyValue instanceof Object) {
          setLocation((Object)yyValue, yyStart);
        }
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.col.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pcol(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    int        yyRepetition1;
    boolean    yyRepeated1;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyRepetition1 = yyStart;
    yyRepeated1   = false;
    while (true) {

      yyC = character(yyRepetition1);
      if (-1 != yyC) {
        yyIndex = yyRepetition1 + 1;
        if (('A' <= yyC) && (yyC <= 'Z')) {

          yyRepetition1 = yyIndex;
          yyRepeated1   = true;
          continue;
        }
      }
      break;
    }

    if (yyRepeated1) {

      yyValue = difference(yyStart, yyRepetition1);

      return new SemanticValue(yyValue, yyRepetition1, yyError);
    }

    // Done.
    yyError = yyError.select("col expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.row.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result prow(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.frow) yyColumn.chunk2.frow = prow$1(yyStart);
    return yyColumn.chunk2.frow;
  }

  /** Actually parse syntax.ExpParser.row. */
  private Result prow$1(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        {
          yyResult = prow$$Star1(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {

            yyValue = difference(yyStart, yyResult.index);

            return yyResult.createValue(yyValue, yyError);
          }
        }
        break;

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("row expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal syntax.ExpParser.row$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result prow$$Star1(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.frow$$Star1) 
      yyColumn.chunk2.frow$$Star1 = prow$$Star1$1(yyStart);
    return yyColumn.chunk2.frow$$Star1;
  }

  /** Actually parse syntax.ExpParser.row$$Star1. */
  private Result prow$$Star1$1(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        {
          yyResult = prow$$Star1(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {

            yyValue = null;

            return yyResult.createValue(yyValue, yyError);
          }
        }
        break;

      default:
        /* No match. */
      }
    }

    // Alternative 2.

    yyValue = null;

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.ifRef.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pifRef(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fifRef) 
      yyColumn.chunk2.fifRef = pifRef$1(yyStart);
    return yyColumn.chunk2.fifRef;
  }

  /** Actually parse syntax.ExpParser.ifRef. */
  private Result pifRef$1(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    ifRef      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pifRef$$Plus1(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Vector<String> v1 = yyResult.semanticValue();

      yyBase   = yyResult.index;
      yyResult = pWord(yyBase);
      if (yyResult.hasValue("if")) {

        yyValue = new ifRef (v1);

        if (yyValue instanceof Object) {
          setLocation((Object)yyValue, yyStart);
        }
        return yyResult.createValue(yyValue, yyError);
      } else {
        yyError = yyError.select("'if' expected", yyBase);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal syntax.ExpParser.ifRef$$Plus1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pifRef$$Plus1(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fifRef$$Plus1) 
      yyColumn.chunk2.fifRef$$Plus1 = pifRef$$Plus1$1(yyStart);
    return yyColumn.chunk2.fifRef$$Plus1;
  }

  /** Actually parse syntax.ExpParser.ifRef$$Plus1. */
  private Result pifRef$$Plus1$1(final int yyStart) throws IOException {
    Result       yyResult;
    Vector<String> yyValue;
    ParseError   yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = prow(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      String v$el$1 = yyResult.semanticValue();

      final int yyChoice1 = yyResult.index;

      // Nested alternative 1.

      yyResult = pifRef$$Plus1(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<String> v$2 = yyResult.semanticValue();

        yyValue = SVector.create(v$el$1, v$2);

        return yyResult.createValue(yyValue, yyError);
      }

      // Nested alternative 2.

      yyValue = SVector.create(v$el$1);

      return new SemanticValue(yyValue, yyChoice1, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Integer.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pInteger(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pDigits(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Digits.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pDigits(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    int        yyRepetition1;
    boolean    yyRepeated1;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyRepetition1 = yyStart;
    yyRepeated1   = false;
    while (true) {

      yyC = character(yyRepetition1);
      if (-1 != yyC) {
        yyIndex = yyRepetition1 + 1;

        switch (yyC) {
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          {
            yyRepetition1 = yyIndex;
            yyRepeated1   = true;
            continue;
          }

        default:
          /* No match. */
        }
      }
      break;
    }

    if (yyRepeated1) {

      yyValue = difference(yyStart, yyRepetition1);

      return new SemanticValue(yyValue, yyRepetition1, yyError);
    }

    // Done.
    yyError = yyError.select("digits expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Str.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pStr(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyRepetition1;
    boolean    yyRepeated1;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('\'' == yyC) {
      yyIndex = yyStart + 1;

      yyRepetition1 = yyIndex;
      yyRepeated1   = false;
      while (true) {

        yyResult = pmiddleOfString(yyRepetition1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {

          yyRepetition1 = yyResult.index;
          yyRepeated1   = true;
          continue;
        }
        break;
      }

      if (yyRepeated1) {

        yyValue = difference(yyStart, yyRepetition1);

        return new SemanticValue(yyValue, yyRepetition1, yyError);
      }
    }

    // Done.
    yyError = yyError.select("str expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.middleOfString.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pmiddleOfString(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fmiddleOfString) 
      yyColumn.chunk2.fmiddleOfString = pmiddleOfString$1(yyStart);
    return yyColumn.chunk2.fmiddleOfString;
  }

  /** Actually parse syntax.ExpParser.middleOfString. */
  private Result pmiddleOfString$1(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('\'' == yyC) {
      yyIndex = yyStart + 1;

      yyValue = "\'";

      return new SemanticValue(yyValue, yyIndex, yyError);
    }

    // Alternative 2.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      yyResult = pmiddleOfString(yyIndex);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        yyValue = difference(yyStart, yyResult.index);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    yyError = yyError.select("middle of string expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Digit.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pDigit(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        {
          yyValue = difference(yyStart, yyIndex);

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("digit expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Letters.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pLetters(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    int        yyRepetition1;
    boolean    yyRepeated1;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyRepetition1 = yyStart;
    yyRepeated1   = false;
    while (true) {

      yyC = character(yyRepetition1);
      if (-1 != yyC) {
        yyIndex = yyRepetition1 + 1;
        if (('A' <= yyC) && (yyC <= 'Z')) {

          yyRepetition1 = yyIndex;
          yyRepeated1   = true;
          continue;
        }
      }
      break;
    }

    if (yyRepeated1) {

      yyValue = difference(yyStart, yyRepetition1);

      return new SemanticValue(yyValue, yyRepetition1, yyError);
    }

    // Done.
    yyError = yyError.select("letters expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Letter.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pLetter(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;
      if (('A' <= yyC) && (yyC <= 'Z')) {

        yyValue = difference(yyStart, yyIndex);

        return new SemanticValue(yyValue, yyIndex, yyError);
      }
    }

    // Done.
    yyError = yyError.select("letter expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Bool.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pBool(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case 'f':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('a' == yyC) {

              yyC = character(yyIndex);
              if (-1 != yyC) {
                yyIndex = yyIndex + 1;
                if ('l' == yyC) {

                  yyC = character(yyIndex);
                  if (-1 != yyC) {
                    yyIndex = yyIndex + 1;
                    if ('s' == yyC) {

                      yyC = character(yyIndex);
                      if (-1 != yyC) {
                        yyIndex = yyIndex + 1;
                        if ('e' == yyC) {

                          yyValue = "false";

                          return new SemanticValue(yyValue, yyIndex, yyError);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        break;

      case 't':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('r' == yyC) {

              yyC = character(yyIndex);
              if (-1 != yyC) {
                yyIndex = yyIndex + 1;
                if ('u' == yyC) {

                  yyC = character(yyIndex);
                  if (-1 != yyC) {
                    yyIndex = yyIndex + 1;
                    if ('e' == yyC) {

                      yyValue = "true";

                      return new SemanticValue(yyValue, yyIndex, yyError);
                    }
                  }
                }
              }
            }
          }
        }
        break;

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("bool expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.NumFormulaLevel2.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pNumFormulaLevel2(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fNumFormulaLevel2) 
      yyColumn.chunk2.fNumFormulaLevel2 = pNumFormulaLevel2$1(yyStart);
    return yyColumn.chunk2.fNumFormulaLevel2;
  }

  /** Actually parse syntax.ExpParser.NumFormulaLevel2. */
  private Result pNumFormulaLevel2$1(final int yyStart) throws IOException {
    Result     yyResult;
    NumFormula yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pNumFormulaLevel1(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      NumFormula v1 = yyResult.semanticValue();

      yyResult = pNumFormulaLevel2$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<Action<NumFormula>> v2 = yyResult.semanticValue();

        yyValue = ParserSupport.apply(v2, v1);

        if (yyValue instanceof Object) {
          setLocation((Object)yyValue, yyStart);
        }
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal syntax.ExpParser.NumFormulaLevel2$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pNumFormulaLevel2$$Star1(final int yyStart) 
    throws IOException {

    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fNumFormulaLevel2$$Star1) 
      yyColumn.chunk2.fNumFormulaLevel2$$Star1 = pNumFormulaLevel2$$Star1$1(yyStart);
    return yyColumn.chunk2.fNumFormulaLevel2$$Star1;
  }

  /** Actually parse syntax.ExpParser.NumFormulaLevel2$$Star1. */
  private Result pNumFormulaLevel2$$Star1$1(final int yyStart) 
    throws IOException {

    Result                   yyResult;
    Vector<Action<NumFormula>> yyValue;
    ParseError               yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pNumFormulaLevel2Tail(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Action<NumFormula> v$el$1 = yyResult.semanticValue();

      yyResult = pNumFormulaLevel2$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<Action<NumFormula>> v$2 = yyResult.semanticValue();

        yyValue = SVector.create(v$el$1, v$2);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyValue = SVector.empty();

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.NumFormulaLevel2Tail.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pNumFormulaLevel2Tail(final int yyStart) throws IOException {
    Result             yyResult;
    Action<NumFormula> yyValue;
    ParseError         yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue("+")) {

      yyResult = pNumFormulaLevel1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final NumFormula v1 = yyResult.semanticValue();

        yyValue = new Action<NumFormula>() {
          public NumFormula run (NumFormula left) {
            Add node = new Add (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue("-")) {

      yyResult = pNumFormulaLevel1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final NumFormula v1 = yyResult.semanticValue();

        yyValue = new Action<NumFormula>() {
          public NumFormula run (NumFormula left) {
            Sub node = new Sub (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    yyError = yyError.select("num formula level2 tail expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.NumFormulaLevel1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pNumFormulaLevel1(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fNumFormulaLevel1) 
      yyColumn.chunk3.fNumFormulaLevel1 = pNumFormulaLevel1$1(yyStart);
    return yyColumn.chunk3.fNumFormulaLevel1;
  }

  /** Actually parse syntax.ExpParser.NumFormulaLevel1. */
  private Result pNumFormulaLevel1$1(final int yyStart) throws IOException {
    Result     yyResult;
    NumFormula yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pNumFormulaLevel0(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      NumFormula v1 = yyResult.semanticValue();

      yyResult = pNumFormulaLevel1$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<Action<NumFormula>> v2 = yyResult.semanticValue();

        yyValue = ParserSupport.apply(v2, v1);

        if (yyValue instanceof Object) {
          setLocation((Object)yyValue, yyStart);
        }
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal syntax.ExpParser.NumFormulaLevel1$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pNumFormulaLevel1$$Star1(final int yyStart) 
    throws IOException {

    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fNumFormulaLevel1$$Star1) 
      yyColumn.chunk3.fNumFormulaLevel1$$Star1 = pNumFormulaLevel1$$Star1$1(yyStart);
    return yyColumn.chunk3.fNumFormulaLevel1$$Star1;
  }

  /** Actually parse syntax.ExpParser.NumFormulaLevel1$$Star1. */
  private Result pNumFormulaLevel1$$Star1$1(final int yyStart) 
    throws IOException {

    Result                   yyResult;
    Vector<Action<NumFormula>> yyValue;
    ParseError               yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pNumFormulaLevel1Tail(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Action<NumFormula> v$el$1 = yyResult.semanticValue();

      yyResult = pNumFormulaLevel1$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<Action<NumFormula>> v$2 = yyResult.semanticValue();

        yyValue = SVector.create(v$el$1, v$2);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyValue = SVector.empty();

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.NumFormulaLevel1Tail.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pNumFormulaLevel1Tail(final int yyStart) throws IOException {
    Result             yyResult;
    Action<NumFormula> yyValue;
    ParseError         yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue("*")) {

      yyResult = pNumFormulaLevel0(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final NumFormula v1 = yyResult.semanticValue();

        yyValue = new Action<NumFormula>() {
          public NumFormula run (NumFormula left) {
            Mul node = new Mul (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue("/")) {

      yyResult = pNumFormulaLevel0(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final NumFormula v1 = yyResult.semanticValue();

        yyValue = new Action<NumFormula>() {
          public NumFormula run (NumFormula left) {
            Div node = new Div (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    yyError = yyError.select("num formula level1 tail expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.NumFormulaLevel3.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pNumFormulaLevel3(final int yyStart) throws IOException {
    Result                   yyResult;
    int                      yyRepetition1;
    Vector<Action<NumFormula>> yyRepValue1;
    NumFormula               yyValue;
    ParseError               yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pNumFormulaLevel2(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      NumFormula v1 = yyResult.semanticValue();

      yyRepetition1 = yyResult.index;
      yyRepValue1   = SVector.empty();
      while (true) {

        yyResult = pNumFormulaLevel3Tail(yyRepetition1);
        yyError  = yyResult.select(yyError, yyRepetition1);
        if (yyResult.hasValue()) {
          Action<NumFormula> v$el$1 = yyResult.semanticValue();

          yyRepetition1 = yyResult.index;
          yyRepValue1   = SVector.create(v$el$1, yyRepValue1);
          continue;
        }
        break;
      }
      { // Start scope for v2.
        Vector<Action<NumFormula>> v2 = SVector.reverse(yyRepValue1);

        yyValue = ParserSupport.apply(v2, v1);

        if (yyValue instanceof Object) {
          setLocation((Object)yyValue, yyStart);
        }
        return new SemanticValue(yyValue, yyRepetition1, yyError);
      } // End scope for v2.
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.NumFormulaLevel3Tail.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pNumFormulaLevel3Tail(final int yyStart) throws IOException {
    Result             yyResult;
    Action<NumFormula> yyValue;
    ParseError         yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue("^")) {

      yyResult = pNumFormulaLevel2(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final NumFormula v1 = yyResult.semanticValue();

        yyValue = new Action<NumFormula>() {
          public NumFormula run (NumFormula left) {
            pow node = new pow (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue("&")) {

      yyResult = pNumFormulaLevel2(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final NumFormula v1 = yyResult.semanticValue();

        yyValue = new Action<NumFormula>() {
          public NumFormula run (NumFormula left) {
            and node = new and (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 3.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue("<")) {

      yyResult = pNumFormulaLevel2(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final NumFormula v1 = yyResult.semanticValue();

        yyValue = new Action<NumFormula>() {
          public NumFormula run (NumFormula left) {
            less node = new less (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 4.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue(">")) {

      yyResult = pNumFormulaLevel2(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final NumFormula v1 = yyResult.semanticValue();

        yyValue = new Action<NumFormula>() {
          public NumFormula run (NumFormula left) {
            great node = new great (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 5.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue("=")) {

      yyResult = pNumFormulaLevel2(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final NumFormula v1 = yyResult.semanticValue();

        yyValue = new Action<NumFormula>() {
          public NumFormula run (NumFormula left) {
            equal node = new equal (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 6.

    yyResult = pSymbol2(yyStart);
    if (yyResult.hasValue("<=")) {

      yyResult = pNumFormulaLevel2(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final NumFormula v1 = yyResult.semanticValue();

        yyValue = new Action<NumFormula>() {
          public NumFormula run (NumFormula left) {
            lessEqual node = new lessEqual (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 7.

    yyResult = pSymbol2(yyStart);
    if (yyResult.hasValue(">=")) {

      yyResult = pNumFormulaLevel2(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final NumFormula v1 = yyResult.semanticValue();

        yyValue = new Action<NumFormula>() {
          public NumFormula run (NumFormula left) {
            greatEqual node = new greatEqual (left, v1);
            copyLocation(node, left);
            return node;
          };
        };

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    yyError = yyError.select("num formula level3 tail expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.NumFormulaLevel0.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pNumFormulaLevel0(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fNumFormulaLevel0) 
      yyColumn.chunk3.fNumFormulaLevel0 = pNumFormulaLevel0$1(yyStart);
    return yyColumn.chunk3.fNumFormulaLevel0;
  }

  /** Actually parse syntax.ExpParser.NumFormulaLevel0. */
  private Result pNumFormulaLevel0$1(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    NumFormula yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pnIf(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      nIf v1 = yyResult.semanticValue();

      yyValue = new numIF (v1);

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 2.

    yyResult = pNumFormulaLevel0$$Plus1(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {

      yyResult = pNumFormulaLevel0$$Plus2(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<NumArguments> v1 = yyResult.semanticValue();

        yyBase   = yyResult.index;
        yyResult = pSymbol1(yyBase);
        if (yyResult.hasValue(")")) {

          yyValue = new SUM (v1);

          if (yyValue instanceof Object) {
            setLocation((Object)yyValue, yyStart);
          }
          return yyResult.createValue(yyValue, yyError);
        } else {
          yyError = yyError.select("')' expected", yyBase);
        }
      }
    }

    // Alternative 3.

    yyResult = pNumFormulaLevel0$$Plus3(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {

      yyResult = pNumFormulaLevel0$$Plus4(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<NumArguments> v1 = yyResult.semanticValue();

        yyBase   = yyResult.index;
        yyResult = pSymbol1(yyBase);
        if (yyResult.hasValue(")")) {

          yyValue = new AVERAGE (v1);

          if (yyValue instanceof Object) {
            setLocation((Object)yyValue, yyStart);
          }
          return yyResult.createValue(yyValue, yyError);
        } else {
          yyError = yyError.select("')' expected", yyBase);
        }
      }
    }

    // Alternative 4.

    yyResult = pArray(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      NumFormula v1 = yyResult.semanticValue();

      yyValue = v1;

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 5.

    yyResult = pCellRef(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      NumFormula v1 = yyResult.semanticValue();

      yyValue = v1;

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 6.

    yyResult = pifRef(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      ifRef v1 = yyResult.semanticValue();

      yyValue = new numIfRef (v1);

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 7.

    yyResult = pNumConstant(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      NumFormula v1 = yyResult.semanticValue();

      yyValue = v1;

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 8.

    yyResult = pSymbol1(yyStart);
    if (yyResult.hasValue("(")) {

      yyResult = pNumFormula(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        NumFormula v1 = yyResult.semanticValue();

        yyBase   = yyResult.index;
        yyResult = pSymbol1(yyBase);
        if (yyResult.hasValue(")")) {

          yyValue = v1;

          return yyResult.createValue(yyValue, yyError);
        } else {
          yyError = yyError.select("')' expected", yyBase);
        }
      }
    }

    // Alternative 9.

    yyResult = pWord(yyStart);
    if (yyResult.hasValue("null")) {

      yyValue = new nullNum ();

      if (yyValue instanceof Object) {
        setLocation((Object)yyValue, yyStart);
      }
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("num formula expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal syntax.ExpParser.NumFormulaLevel0$$Plus1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pNumFormulaLevel0$$Plus1(final int yyStart) 
    throws IOException {

    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fNumFormulaLevel0$$Plus1) 
      yyColumn.chunk3.fNumFormulaLevel0$$Plus1 = pNumFormulaLevel0$$Plus1$1(yyStart);
    return yyColumn.chunk3.fNumFormulaLevel0$$Plus1;
  }

  /** Actually parse syntax.ExpParser.NumFormulaLevel0$$Plus1. */
  private Result pNumFormulaLevel0$$Plus1$1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol4(yyStart);
    if (yyResult.hasValue("SUM(")) {

      final int yyChoice1 = yyResult.index;

      // Nested alternative 1.

      yyResult = pNumFormulaLevel0$$Plus1(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        yyValue = null;

        return yyResult.createValue(yyValue, yyError);
      }

      // Nested alternative 2.

      yyValue = null;

      return new SemanticValue(yyValue, yyChoice1, yyError);
    }

    // Done.
    yyError = yyError.select("num formula expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal syntax.ExpParser.NumFormulaLevel0$$Plus2.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pNumFormulaLevel0$$Plus2(final int yyStart) 
    throws IOException {

    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fNumFormulaLevel0$$Plus2) 
      yyColumn.chunk3.fNumFormulaLevel0$$Plus2 = pNumFormulaLevel0$$Plus2$1(yyStart);
    return yyColumn.chunk3.fNumFormulaLevel0$$Plus2;
  }

  /** Actually parse syntax.ExpParser.NumFormulaLevel0$$Plus2. */
  private Result pNumFormulaLevel0$$Plus2$1(final int yyStart) 
    throws IOException {

    Result             yyResult;
    Vector<NumArguments> yyValue;
    ParseError         yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pNumArguments(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      NumArguments v$el$1 = yyResult.semanticValue();

      final int yyChoice1 = yyResult.index;

      // Nested alternative 1.

      yyResult = pNumFormulaLevel0$$Plus2(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<NumArguments> v$2 = yyResult.semanticValue();

        yyValue = SVector.create(v$el$1, v$2);

        return yyResult.createValue(yyValue, yyError);
      }

      // Nested alternative 2.

      yyValue = SVector.create(v$el$1);

      return new SemanticValue(yyValue, yyChoice1, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal syntax.ExpParser.NumFormulaLevel0$$Plus3.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pNumFormulaLevel0$$Plus3(final int yyStart) 
    throws IOException {

    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fNumFormulaLevel0$$Plus3) 
      yyColumn.chunk3.fNumFormulaLevel0$$Plus3 = pNumFormulaLevel0$$Plus3$1(yyStart);
    return yyColumn.chunk3.fNumFormulaLevel0$$Plus3;
  }

  /** Actually parse syntax.ExpParser.NumFormulaLevel0$$Plus3. */
  private Result pNumFormulaLevel0$$Plus3$1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol8(yyStart);
    if (yyResult.hasValue("AVERAGE(")) {

      final int yyChoice1 = yyResult.index;

      // Nested alternative 1.

      yyResult = pNumFormulaLevel0$$Plus3(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        yyValue = null;

        return yyResult.createValue(yyValue, yyError);
      }

      // Nested alternative 2.

      yyValue = null;

      return new SemanticValue(yyValue, yyChoice1, yyError);
    }

    // Done.
    yyError = yyError.select("num formula expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal syntax.ExpParser.NumFormulaLevel0$$Plus4.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pNumFormulaLevel0$$Plus4(final int yyStart) 
    throws IOException {

    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fNumFormulaLevel0$$Plus4) 
      yyColumn.chunk3.fNumFormulaLevel0$$Plus4 = pNumFormulaLevel0$$Plus4$1(yyStart);
    return yyColumn.chunk3.fNumFormulaLevel0$$Plus4;
  }

  /** Actually parse syntax.ExpParser.NumFormulaLevel0$$Plus4. */
  private Result pNumFormulaLevel0$$Plus4$1(final int yyStart) 
    throws IOException {

    Result             yyResult;
    Vector<NumArguments> yyValue;
    ParseError         yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pNumArguments(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      NumArguments v$el$3 = yyResult.semanticValue();

      final int yyChoice1 = yyResult.index;

      // Nested alternative 1.

      yyResult = pNumFormulaLevel0$$Plus4(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Vector<NumArguments> v$4 = yyResult.semanticValue();

        yyValue = SVector.create(v$el$3, v$4);

        return yyResult.createValue(yyValue, yyError);
      }

      // Nested alternative 2.

      yyValue = SVector.create(v$el$3);

      return new SemanticValue(yyValue, yyChoice1, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Spacing.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pSpacing(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Result     yyPredResult;
    boolean    yyPredMatched;
    int        yyRepetition1;
    int        yyRepetition2;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyRepetition1 = yyStart;
    while (true) {

      final int yyChoice1 = yyRepetition1;

      // Nested alternative 1.

      yyC = character(yyChoice1);
      if (-1 != yyC) {
        yyIndex = yyChoice1 + 1;

        switch (yyC) {
        case ' ':
          {
            yyRepetition1 = yyIndex;
            continue;
          }

        case '\t':
          {
            yyRepetition1 = yyIndex;
            continue;
          }

        case '\f':
          {
            yyRepetition1 = yyIndex;
            continue;
          }

        case '\r':
          {
            final int yyChoice2 = yyIndex;

            // Nested alternative 1.

            yyC = character(yyChoice2);
            if ('\n' == yyC) {
              yyIndex = yyChoice2 + 1;

              yyRepetition1 = yyIndex;
              continue;
            }

            // Nested alternative 2.

            yyRepetition1 = yyChoice2;
            continue;
          }

        case '\n':
          {
            yyRepetition1 = yyIndex;
            continue;
          }

        case '/':
          {
            yyC = character(yyIndex);
            if (-1 != yyC) {
              yyIndex = yyIndex + 1;
              if ('/' == yyC) {

                yyRepetition2 = yyIndex;
                while (true) {

                  yyPredMatched = false;

                  yyPredResult = pEOL(yyRepetition2);
                  if (yyPredResult.hasValue()) {

                    yyPredMatched = true;
                  }

                  if (! yyPredMatched) {

                    yyC = character(yyRepetition2);
                    if (-1 != yyC) {
                      yyIndex = yyRepetition2 + 1;

                      yyRepetition2 = yyIndex;
                      continue;
                    }
                  } else {
                    yyError = yyError.select("spacing expected", yyStart);
                  }
                  break;
                }

                final int yyChoice2 = yyRepetition2;

                // Nested alternative 1.

                yyC = character(yyChoice2);
                if (-1 != yyC) {
                  yyIndex = yyChoice2 + 1;

                  switch (yyC) {
                  case '\r':
                    {
                      final int yyChoice3 = yyIndex;

                      // Nested alternative 1.

                      yyC = character(yyChoice3);
                      if ('\n' == yyC) {
                        yyIndex = yyChoice3 + 1;

                        yyRepetition1 = yyIndex;
                        continue;
                      }

                      // Nested alternative 2.

                      yyRepetition1 = yyChoice3;
                      continue;
                    }

                  case '\n':
                    {
                      yyRepetition1 = yyIndex;
                      continue;
                    }

                  default:
                    /* No match. */
                  }
                }

                // Nested alternative 2.

                yyPredMatched = false;

                yyC = character(yyChoice2);
                if (-1 != yyC) {

                  yyPredMatched = true;
                }

                if (! yyPredMatched) {

                  yyRepetition1 = yyChoice2;
                  continue;
                } else {
                  yyError = yyError.select("spacing expected", yyStart);
                }
              }
            }
          }
          break;

        default:
          /* No match. */
        }
      }

      // Nested alternative 2.

      yyResult = pMLComment(yyChoice1);
      yyError  = yyResult.select(yyError, yyRepetition1);
      if (yyResult.hasValue()) {

        yyRepetition1 = yyResult.index;
        continue;
      }
      break;
    }

    yyValue = null;

    return new SemanticValue(yyValue, yyRepetition1, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Space.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pSpace(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case ' ':
        {
          yyValue = null;

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '\t':
        {
          yyValue = null;

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '\f':
        {
          yyValue = null;

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '\r':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyC = character(yyChoice1);
          if ('\n' == yyC) {
            yyIndex = yyChoice1 + 1;

            yyValue = null;

            return new SemanticValue(yyValue, yyIndex, yyError);
          }

          // Nested alternative 2.

          yyValue = null;

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case '\n':
        {
          yyValue = null;

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("space expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.EOL.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pEOL(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '\r':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyC = character(yyChoice1);
          if ('\n' == yyC) {
            yyIndex = yyChoice1 + 1;

            yyValue = null;

            return new SemanticValue(yyValue, yyIndex, yyError);
          }

          // Nested alternative 2.

          yyValue = null;

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case '\n':
        {
          yyValue = null;

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("EOL expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Comment.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pComment(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Result     yyPredResult;
    boolean    yyPredMatched;
    int        yyRepetition1;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('/' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('/' == yyC) {
        yyIndex = yyIndex + 1;

        yyRepetition1 = yyIndex;
        while (true) {

          yyPredMatched = false;

          yyPredResult = pEOL(yyRepetition1);
          if (yyPredResult.hasValue()) {

            yyPredMatched = true;
          }

          if (! yyPredMatched) {

            yyC = character(yyRepetition1);
            if (-1 != yyC) {
              yyIndex = yyRepetition1 + 1;

              yyRepetition1 = yyIndex;
              continue;
            }
          } else {
            yyError = yyError.select("comment expected", yyStart);
          }
          break;
        }

        final int yyChoice1 = yyRepetition1;

        // Nested alternative 1.

        yyC = character(yyChoice1);
        if (-1 != yyC) {
          yyIndex = yyChoice1 + 1;

          switch (yyC) {
          case '\r':
            {
              final int yyChoice2 = yyIndex;

              // Nested alternative 1.

              yyC = character(yyChoice2);
              if ('\n' == yyC) {
                yyIndex = yyChoice2 + 1;

                yyValue = null;

                return new SemanticValue(yyValue, yyIndex, yyError);
              }

              // Nested alternative 2.

              yyValue = null;

              return new SemanticValue(yyValue, yyChoice2, yyError);
            }

          case '\n':
            {
              yyValue = null;

              return new SemanticValue(yyValue, yyIndex, yyError);
            }

          default:
            /* No match. */
          }
        }

        // Nested alternative 2.

        yyPredMatched = false;

        yyC = character(yyChoice1);
        if (-1 != yyC) {

          yyPredMatched = true;
        }

        if (! yyPredMatched) {

          yyValue = null;

          return new SemanticValue(yyValue, yyChoice1, yyError);
        } else {
          yyError = yyError.select("comment expected", yyStart);
        }
      }
    }

    // Alternative 2.

    yyResult = pMLComment(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {

      yyValue = null;

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("comment expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.SLComment.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pSLComment(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyPredResult;
    boolean    yyPredMatched;
    int        yyRepetition1;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('/' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('/' == yyC) {
        yyIndex = yyIndex + 1;

        yyRepetition1 = yyIndex;
        while (true) {

          yyPredMatched = false;

          yyPredResult = pEOL(yyRepetition1);
          if (yyPredResult.hasValue()) {

            yyPredMatched = true;
          }

          if (! yyPredMatched) {

            yyC = character(yyRepetition1);
            if (-1 != yyC) {
              yyIndex = yyRepetition1 + 1;

              yyRepetition1 = yyIndex;
              continue;
            }
          } else {
            yyError = yyError.select("s l comment expected", yyStart);
          }
          break;
        }

        final int yyChoice1 = yyRepetition1;

        // Nested alternative 1.

        yyC = character(yyChoice1);
        if (-1 != yyC) {
          yyIndex = yyChoice1 + 1;

          switch (yyC) {
          case '\r':
            {
              final int yyChoice2 = yyIndex;

              // Nested alternative 1.

              yyC = character(yyChoice2);
              if ('\n' == yyC) {
                yyIndex = yyChoice2 + 1;

                yyValue = null;

                return new SemanticValue(yyValue, yyIndex, yyError);
              }

              // Nested alternative 2.

              yyValue = null;

              return new SemanticValue(yyValue, yyChoice2, yyError);
            }

          case '\n':
            {
              yyValue = null;

              return new SemanticValue(yyValue, yyIndex, yyError);
            }

          default:
            /* No match. */
          }
        }

        // Nested alternative 2.

        yyPredMatched = false;

        yyC = character(yyChoice1);
        if (-1 != yyC) {

          yyPredMatched = true;
        }

        if (! yyPredMatched) {

          yyValue = null;

          return new SemanticValue(yyValue, yyChoice1, yyError);
        } else {
          yyError = yyError.select("s l comment expected", yyStart);
        }
      }
    }

    // Done.
    yyError = yyError.select("s l comment expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.MLComment.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pMLComment(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyPredIndex;
    boolean    yyPredMatched;
    int        yyBase;
    int        yyRepetition1;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('/' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('*' == yyC) {
        yyIndex = yyIndex + 1;

        yyRepetition1 = yyIndex;
        while (true) {

          final int yyChoice1 = yyRepetition1;

          // Nested alternative 1.

          yyResult = pMLComment(yyChoice1);
          yyError  = yyResult.select(yyError, yyRepetition1);
          if (yyResult.hasValue()) {

            yyRepetition1 = yyResult.index;
            continue;
          }

          // Nested alternative 2.

          yyPredMatched = false;

          yyC = character(yyChoice1);
          if ('*' == yyC) {
            yyPredIndex = yyChoice1 + 1;

            yyC = character(yyPredIndex);
            if ('/' == yyC) {

              yyPredMatched = true;
            }
          }

          if (! yyPredMatched) {

            yyC = character(yyChoice1);
            if (-1 != yyC) {
              yyIndex = yyChoice1 + 1;

              yyRepetition1 = yyIndex;
              continue;
            }
          } else {
            yyError = yyError.select("m l comment expected", yyStart);
          }
          break;
        }

        yyBase = yyRepetition1;
        yyC    = character(yyBase);
        if ('*' == yyC) {
          yyIndex = yyRepetition1 + 1;

          yyC = character(yyIndex);
          if ('/' == yyC) {
            yyIndex = yyIndex + 1;

            yyValue = null;

            return new SemanticValue(yyValue, yyIndex, yyError);
          } else {
            yyError = yyError.select("'*/' expected", yyBase);
          }
        } else {
          yyError = yyError.select("'*/' expected", yyBase);
        }
      }
    }

    // Done.
    yyError = yyError.select("m l comment expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Identifier.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pIdentifier(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      if (! contains (KEYWORDS, yyValue)) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    yyError = yyError.select("identifier expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.Word.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pWord(final int yyStart) throws IOException {
    ExpParserColumn yyColumn = (ExpParserColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fWord) 
      yyColumn.chunk3.fWord = pWord$1(yyStart);
    return yyColumn.chunk3.fWord;
  }

  /** Actually parse syntax.ExpParser.Word. */
  private Result pWord$1(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pWordCharacters(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.WordCharacters.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pWordCharacters(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    int        yyRepetition1;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;
      char h = (char)yyC;

      if (Character.isJavaIdentifierStart (h)) {

        yyRepetition1 = yyIndex;
        while (true) {

          yyC = character(yyRepetition1);
          if (-1 != yyC) {
            yyIndex = yyRepetition1 + 1;
            char t = (char)yyC;

            if (Character.isJavaIdentifierPart (t)) {

              yyRepetition1 = yyIndex;
              continue;
            }
          }
          break;
        }

        yyValue = difference(yyStart, yyRepetition1);

        return new SemanticValue(yyValue, yyRepetition1, yyError);
      }
    }

    // Done.
    yyError = yyError.select("word characters expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal syntax.ExpParser.EOF.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pEOF(final int yyStart) throws IOException {
    int        yyC;
    boolean    yyPredMatched;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyPredMatched = false;

    yyC = character(yyStart);
    if (-1 != yyC) {

      yyPredMatched = true;
    }

    if (! yyPredMatched) {

      yyValue = null;

      return new SemanticValue(yyValue, yyStart, yyError);
    } else {
      yyError = yyError.select("EOF expected", yyStart);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
  * Drop the current path off string when it occurs at the beginning.
  */
  public String dropCurrentPath (String string) {
    int index = 0;
    int stringlen = string.length ();
    String prefix = System.getProperty ("user.dir");
    int prefixlen = prefix.length ();
    while ((index < stringlen) && (index < prefixlen) && (string.charAt (index) == prefix.charAt (index))) {
      index++;
    }
    if ((index != 0) && (string.charAt (index) == java.io.File.separatorChar)) {
      index++;
    }
    return string.substring (index);
  }
  
  /**
  * Format a Rats! parser error message according to Scala compiler
  * conventions for better compatibility with error processors.
  */
  public String formatParseError (ParseError error, Boolean showCoord) throws IOException {
    StringBuilder buf = new StringBuilder ();
    
    if (error.index == -1) {
      buf.append (error.msg);
    } else {
      Location loc = location (error.index);
      if (showCoord) {
        String filename = loc.file;
        buf.append (filename);
        buf.append (':');
        buf.append (loc.line);
        buf.append (": ");
      }
      
      buf.append (error.msg);
      buf.append ("\n");
      
      String line = lineAt (error.index);
      buf.append (line);
      buf.append ('\n');
      for (int i = 1; i < loc.column; i++) buf.append (' ');
      buf.append ("^");
    }
    
    return buf.toString ();
  }
  
  static {
    add (KEYWORDS, new String[] { "false", "if", "null", "true" });
  }

  // =========================================================================

  /**
   * Add the specified values to the specified set.
   *
   * @param set The set.
   * @param values The new values.
   */
  protected static final <T> void add(Set<T> set, T[] values) {
    for (T v : values) set.add(v);
  }

  /**
   * Check whether the specified set contains the specified value.
   *
   * @param set The set.
   * @param value The value.
   * @return <code>true</code> if the set contains the value.
   */
  protected static final <T> boolean contains(Set<T> set, T value) {
    return set.contains(value);
  }

}
